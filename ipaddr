#! /bin/sh
#
# Monitor network interfaces for IP address changes, see `ipaddr --help'.

# Copyright (c) 2017 Rouven Spreckels <n3vu0r@qu1x.org>
#
# Usage of the works is permitted provided that
# this instrument is retained with the works, so that
# any entity that uses the works is notified of this instrument.
#
# DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.

HOOK=${IPADDR_HOOK:-"/etc/ipaddr.d"}
WORK=${IPADDR_WORK:-"/run/ipaddr"}

hooks=
[ -d "$HOOK" -a -r "$HOOK" -a -x "$HOOK" ] && for hook in "$HOOK/"*
do
	[ -r "$hook" -a -x "$hook" ] && hooks="$hooks\n  $hook"
done

help="\
IP Address Monitor

ipaddr [OPTION]
  If a monitor is running on the same \$IPADDR_WORK directory and the
  \$IPADDR_HOOK/20-list hook is executable, all currently assigned IP addresses
  are listed in the format of the event variable \$list.

ipaddr monitor
  Monitor network interfaces for IP address changes. Hooks in \$IPADDR_HOOK are
  executable or ignored. They are entered in lexical order and have access to
  the environment and event variables listed below. Hooks are advised to wrapped
  file operations with \`flock'. Long hooks delay subsequent events but no event
  is ever missed.

OPTIONs:
  -h, --help     Print help.
  -v, --version  Print version.

Environment variables:
  \$IPADDR_WORK  ${WORK:-"<WORK_DIR>"}
  \$IPADDR_HOOK  ${HOOK:-"<HOOK_DIR>"}

Event variables:
  \$list           <list of all currently assigned addresses
                    as \"\$interface \$address/\$prefix\\\\n\"
                    in the order they have been assigned
                    inclusive the current \$action>
  \$action         assign|update (lifetime via RA)|resign
  \$index          <network interface index>
  \$interface      <network interface name>
  \$family         inet|inet6
  \$address        <IP address>
  \$prefix         <number of prefix bits>
  \$brd            <broadcast address (inet only)>
  \$scope          <as of \`ip-address'>
  \$flag_list      <as of \`ip-address' but separated with \\\\n>
  \$valid_lft      <as of \`ip-address without sec postfix>
  \$preferred_lft  <as of \`ip-address without sec postfix>

Executable hooks:$hooks"
info="\
v1.0.0 <https://qu1x.org/ipaddr>"
hint="\
Invalid usage, see \`ipaddr --help'."

extr() {
	if [ "$1" = Deleted ]; then shift; action=resign; else action=assign; fi
	index=$(echo "$1" | sed 's|:$||')
	interface=$2
	family=$3
	address=$(echo "$4" | sed 's|/.*||')
	prefix=$(echo "$4" | sed 's|.*/||')
	if [ "$family" = inet -a "$interface" != lo ]; then brd=$6; shift 2; fi
	scope=$6
	shift 6
	if [ $# -gt 5 ]; then flag_list=$1; shift; else flag_list=; fi
	while [ $# -gt 5 ]; do shift; flag_list="$flag_list\n$1"; done
	shift
	valid_lft=$(echo "$2" | sed 's|sec$||')
	preferred_lft=$(echo "$4" | sed 's|sec$||')
}

list() {
	[ -e "$WORK" ] || {
		echo 1>&2 "No monitor running on $WORK"
		exit 1
	}
	list="$WORK/list"
	[ -e "$list" ] && flock -s "$list" cat "$list"
}

hook() {
	[ -e "$WORK" ] && {
		echo 1>&2 "Monitor already running on $WORK"
		exit 1
	}
	mkdir "$WORK" 2> /dev/null || {
		echo 1>&2 "Write permission required for $(dirname "$WORK")"
		exit 1
	}
	trap 'rm -rf "$WORK"; exit' EXIT INT TERM HUP
	list=
	{ ip -o address; ip -o monitor address; } | while read -r data
	do
		extr $data
		[ "$interface" = lo ] && continue
		item="$interface $address/$prefix"
		case $action in
			assign)
				if echo "$list" | grep -q "$item"
				then
					action=update
				else
					[ "$list" ] && list="$list\n$item" || list=$item
				fi ;;
			resign)
				list=$(echo "$list" | grep -v "$item") ;;
		esac
		[ -d "$HOOK" -a -r "$HOOK" -a -x "$HOOK" ] && for hook in "$HOOK/"*
		do
			[ -r "$hook" -a -x "$hook" ] && env -i \
				FEED="$FEED" \
				WORK="$WORK" \
				HOOK="$HOOK" \
				list="$list" \
				action="$action" \
				index="$index" \
				interface="$interface" \
				family="$family" \
				address="$address" \
				prefix="$prefix" \
				brd="$brd" \
				scope="$scope" \
				flag_list="$flag_list" \
				valid_lft="$valid_lft" \
				preferred_lft="$preferred_lft" \
				"$hook"
		done
	done
}

[ $# -le 1 ] && what=$1 || what=*

case $what in
	"")
		list ;;
	monitor)
		hook ;;
	-h|--help)
		echo "$help" ;;
	-v|--version)
		echo "$info" ;;
	*)
		echo "$hint" 1>&2; exit 1 ;;
esac
